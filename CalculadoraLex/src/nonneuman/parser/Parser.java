/* This file was generated by SableCC (http://www.sablecc.org/). */

package nonneuman.parser;

import nonneuman.lexer.*;
import nonneuman.node.*;
import nonneuman.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PAInicio node1 = (PAInicio) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AInicioInicio */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AInicio2Inicio */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AMainInicio */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list);
            }
            break;
            case 3: /* reduce ABlocoBloco */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list);
            }
            break;
            case 4: /* reduce AFuncaoFuncao */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list);
            }
            break;
            case 5: /* reduce AFuncao2Funcao */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list);
            }
            break;
            case 6: /* reduce ARetornoRetorno */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list);
            }
            break;
            case 7: /* reduce AChamadaChamadaFunc */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list);
            }
            break;
            case 8: /* reduce AMainMain */
            {
                ArrayList<Object> list = new8();
                push(goTo(5), list);
            }
            break;
            case 9: /* reduce AUnicaFuncaoList */
            {
                ArrayList<Object> list = new9();
                push(goTo(6), list);
            }
            break;
            case 10: /* reduce AVariasFuncaoList */
            {
                ArrayList<Object> list = new10();
                push(goTo(6), list);
            }
            break;
            case 11: /* reduce AUnicoBlocoList */
            {
                ArrayList<Object> list = new11();
                push(goTo(7), list);
            }
            break;
            case 12: /* reduce AVariosBlocoList */
            {
                ArrayList<Object> list = new12();
                push(goTo(7), list);
            }
            break;
            case 13: /* reduce AUnicoArgsList */
            {
                ArrayList<Object> list = new13();
                push(goTo(8), list);
            }
            break;
            case 14: /* reduce AVariosArgsList */
            {
                ArrayList<Object> list = new14();
                push(goTo(8), list);
            }
            break;
            case 15: /* reduce AUnicoParamsList */
            {
                ArrayList<Object> list = new15();
                push(goTo(9), list);
            }
            break;
            case 16: /* reduce AVariosParamsList */
            {
                ArrayList<Object> list = new16();
                push(goTo(9), list);
            }
            break;
            case 17: /* reduce AExprArgumento */
            {
                ArrayList<Object> list = new17();
                push(goTo(10), list);
            }
            break;
            case 18: /* reduce AChamadaArgumento */
            {
                ArrayList<Object> list = new18();
                push(goTo(10), list);
            }
            break;
            case 19: /* reduce ACondicionalArgumento */
            {
                ArrayList<Object> list = new19();
                push(goTo(10), list);
            }
            break;
            case 20: /* reduce AParamParametro */
            {
                ArrayList<Object> list = new20();
                push(goTo(11), list);
            }
            break;
            case 21: /* reduce AFuncaltaParametro */
            {
                ArrayList<Object> list = new21();
                push(goTo(11), list);
            }
            break;
            case 22: /* reduce AFatorExpr */
            {
                ArrayList<Object> list = new22();
                push(goTo(12), list);
            }
            break;
            case 23: /* reduce APlusExpr */
            {
                ArrayList<Object> list = new23();
                push(goTo(12), list);
            }
            break;
            case 24: /* reduce AMinusExpr */
            {
                ArrayList<Object> list = new24();
                push(goTo(12), list);
            }
            break;
            case 25: /* reduce ATermoFator */
            {
                ArrayList<Object> list = new25();
                push(goTo(13), list);
            }
            break;
            case 26: /* reduce AMultFator */
            {
                ArrayList<Object> list = new26();
                push(goTo(13), list);
            }
            break;
            case 27: /* reduce ADivFator */
            {
                ArrayList<Object> list = new27();
                push(goTo(13), list);
            }
            break;
            case 28: /* reduce AModFator */
            {
                ArrayList<Object> list = new28();
                push(goTo(13), list);
            }
            break;
            case 29: /* reduce AValorTermo */
            {
                ArrayList<Object> list = new29();
                push(goTo(14), list);
            }
            break;
            case 30: /* reduce AParTermo */
            {
                ArrayList<Object> list = new30();
                push(goTo(14), list);
            }
            break;
            case 31: /* reduce AIntValor */
            {
                ArrayList<Object> list = new31();
                push(goTo(15), list);
            }
            break;
            case 32: /* reduce ARealValor */
            {
                ArrayList<Object> list = new32();
                push(goTo(15), list);
            }
            break;
            case 33: /* reduce ABoolValor */
            {
                ArrayList<Object> list = new33();
                push(goTo(15), list);
            }
            break;
            case 34: /* reduce AVarValor */
            {
                ArrayList<Object> list = new34();
                push(goTo(15), list);
            }
            break;
            case 35: /* reduce AIntType */
            {
                ArrayList<Object> list = new35();
                push(goTo(16), list);
            }
            break;
            case 36: /* reduce ABoolType */
            {
                ArrayList<Object> list = new36();
                push(goTo(16), list);
            }
            break;
            case 37: /* reduce ARealType */
            {
                ArrayList<Object> list = new37();
                push(goTo(16), list);
            }
            break;
            case 38: /* reduce AUnicoTypeList */
            {
                ArrayList<Object> list = new38();
                push(goTo(17), list);
            }
            break;
            case 39: /* reduce AVariosTypeList */
            {
                ArrayList<Object> list = new39();
                push(goTo(17), list);
            }
            break;
            case 40: /* reduce AIfCondicional */
            {
                ArrayList<Object> list = new40();
                push(goTo(18), list);
            }
            break;
            case 41: /* reduce AIfelseCondicional */
            {
                ArrayList<Object> list = new41();
                push(goTo(18), list);
            }
            break;
            case 42: /* reduce ABoolCondicao */
            {
                ArrayList<Object> list = new42();
                push(goTo(19), list);
            }
            break;
            case 43: /* reduce AEqCondicao */
            {
                ArrayList<Object> list = new43();
                push(goTo(19), list);
            }
            break;
            case 44: /* reduce AMqCondicao */
            {
                ArrayList<Object> list = new44();
                push(goTo(19), list);
            }
            break;
            case 45: /* reduce AMnCondicao */
            {
                ArrayList<Object> list = new45();
                push(goTo(19), list);
            }
            break;
            case 46: /* reduce ACondCondicao */
            {
                ArrayList<Object> list = new46();
                push(goTo(19), list);
            }
            break;
            case 47: /* reduce AEqIgual */
            {
                ArrayList<Object> list = new47();
                push(goTo(20), list);
            }
            break;
            case 48: /* reduce AMqMaior */
            {
                ArrayList<Object> list = new48();
                push(goTo(21), list);
            }
            break;
            case 49: /* reduce AMnMenor */
            {
                ArrayList<Object> list = new49();
                push(goTo(22), list);
            }
            break;
            case 50: /* reduce AFuncAlta */
            {
                ArrayList<Object> list = new50();
                push(goTo(23), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AInicioInicio */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAInicio painicioNode1;
        {
            // Block
        PABlocoList pablocolistNode2;
        PAMain pamainNode3;
        pablocolistNode2 = (PABlocoList)nodeArrayList1.get(0);
        pamainNode3 = (PAMain)nodeArrayList2.get(0);

        painicioNode1 = new AOp1AInicio(pablocolistNode2, pamainNode3);
        }
	nodeList.add(painicioNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AInicio2Inicio */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAInicio painicioNode1;
        {
            // Block
        PAMain pamainNode2;
        PABlocoList pablocolistNode3;
        pamainNode2 = (PAMain)nodeArrayList1.get(0);
        pablocolistNode3 = (PABlocoList)nodeArrayList2.get(0);

        painicioNode1 = new AOp2AInicio(pamainNode2, pablocolistNode3);
        }
	nodeList.add(painicioNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AMainInicio */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAInicio painicioNode1;
        {
            // Block
        PAMain pamainNode2;
        pamainNode2 = (PAMain)nodeArrayList1.get(0);

        painicioNode1 = new AOp3AInicio(pamainNode2);
        }
	nodeList.add(painicioNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ABlocoBloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PABloco pablocoNode1;
        {
            // Block
        TLParen tlparenNode2;
        PAFuncao pafuncaoNode3;
        TRParen trparenNode4;
        tlparenNode2 = (TLParen)nodeArrayList1.get(0);
        pafuncaoNode3 = (PAFuncao)nodeArrayList2.get(0);
        trparenNode4 = (TRParen)nodeArrayList3.get(0);

        pablocoNode1 = new AABloco(tlparenNode2, pafuncaoNode3, trparenNode4);
        }
	nodeList.add(pablocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AFuncaoFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAFuncao pafuncaoNode1;
        {
            // Block
        TFuncId tfuncidNode2;
        PAType patypeNode3;
        TId tidNode4;
        TLParen tlparenNode5;
        PAParamsList paparamslistNode6;
        TRParen trparenNode7;
        PARetorno paretornoNode8;
        tfuncidNode2 = (TFuncId)nodeArrayList1.get(0);
        patypeNode3 = (PAType)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tlparenNode5 = (TLParen)nodeArrayList4.get(0);
        paparamslistNode6 = (PAParamsList)nodeArrayList5.get(0);
        trparenNode7 = (TRParen)nodeArrayList6.get(0);
        paretornoNode8 = (PARetorno)nodeArrayList7.get(0);

        pafuncaoNode1 = new AFuncaoAFuncao(tfuncidNode2, patypeNode3, tidNode4, tlparenNode5, paparamslistNode6, trparenNode7, paretornoNode8);
        }
	nodeList.add(pafuncaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AFuncao2Funcao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAFuncao pafuncaoNode1;
        {
            // Block
        TFuncId tfuncidNode2;
        PAType patypeNode3;
        TId tidNode4;
        TLParen tlparenNode5;
        TRParen trparenNode6;
        PARetorno paretornoNode7;
        tfuncidNode2 = (TFuncId)nodeArrayList1.get(0);
        patypeNode3 = (PAType)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tlparenNode5 = (TLParen)nodeArrayList4.get(0);
        trparenNode6 = (TRParen)nodeArrayList5.get(0);
        paretornoNode7 = (PARetorno)nodeArrayList6.get(0);

        pafuncaoNode1 = new AVaziaAFuncao(tfuncidNode2, patypeNode3, tidNode4, tlparenNode5, trparenNode6, paretornoNode7);
        }
	nodeList.add(pafuncaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ARetornoRetorno */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PARetorno paretornoNode1;
        {
            // Block
        TColon tcolonNode2;
        TLParen tlparenNode3;
        PAArgumento paargumentoNode4;
        TRParen trparenNode5;
        tcolonNode2 = (TColon)nodeArrayList1.get(0);
        tlparenNode3 = (TLParen)nodeArrayList2.get(0);
        paargumentoNode4 = (PAArgumento)nodeArrayList3.get(0);
        trparenNode5 = (TRParen)nodeArrayList4.get(0);

        paretornoNode1 = new AARetorno(tcolonNode2, tlparenNode3, paargumentoNode4, trparenNode5);
        }
	nodeList.add(paretornoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AChamadaChamadaFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAChamadaFunc pachamadafuncNode1;
        {
            // Block
        TId tidNode2;
        TLParen tlparenNode3;
        PAArgsList paargslistNode4;
        TRParen trparenNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparenNode3 = (TLParen)nodeArrayList2.get(0);
        paargslistNode4 = (PAArgsList)nodeArrayList3.get(0);
        trparenNode5 = (TRParen)nodeArrayList4.get(0);

        pachamadafuncNode1 = new AAChamadaFunc(tidNode2, tlparenNode3, paargslistNode4, trparenNode5);
        }
	nodeList.add(pachamadafuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AMainMain */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAMain pamainNode1;
        {
            // Block
        TEntryPoint tentrypointNode2;
        PABloco pablocoNode3;
        tentrypointNode2 = (TEntryPoint)nodeArrayList1.get(0);
        pablocoNode3 = (PABloco)nodeArrayList2.get(0);

        pamainNode1 = new AAMain(tentrypointNode2, pablocoNode3);
        }
	nodeList.add(pamainNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AUnicaFuncaoList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AVariasFuncaoList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AUnicoBlocoList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PABlocoList pablocolistNode1;
        {
            // Block
        PABloco pablocoNode2;
        pablocoNode2 = (PABloco)nodeArrayList1.get(0);

        pablocolistNode1 = new AUnicoABlocoList(pablocoNode2);
        }
	nodeList.add(pablocolistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AVariosBlocoList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PABlocoList pablocolistNode1;
        {
            // Block
        PABloco pablocoNode2;
        PABlocoList pablocolistNode3;
        pablocoNode2 = (PABloco)nodeArrayList1.get(0);
        pablocolistNode3 = (PABlocoList)nodeArrayList2.get(0);

        pablocolistNode1 = new AVariosABlocoList(pablocoNode2, pablocolistNode3);
        }
	nodeList.add(pablocolistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AUnicoArgsList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAArgsList paargslistNode1;
        {
            // Block
        PAArgumento paargumentoNode2;
        paargumentoNode2 = (PAArgumento)nodeArrayList1.get(0);

        paargslistNode1 = new AUnicoAArgsList(paargumentoNode2);
        }
	nodeList.add(paargslistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AVariosArgsList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAArgsList paargslistNode1;
        {
            // Block
        PAArgumento paargumentoNode2;
        TComma tcommaNode3;
        PAArgsList paargslistNode4;
        paargumentoNode2 = (PAArgumento)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        paargslistNode4 = (PAArgsList)nodeArrayList3.get(0);

        paargslistNode1 = new AVariosAArgsList(paargumentoNode2, tcommaNode3, paargslistNode4);
        }
	nodeList.add(paargslistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AUnicoParamsList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAParamsList paparamslistNode1;
        {
            // Block
        PAParametro paparametroNode2;
        paparametroNode2 = (PAParametro)nodeArrayList1.get(0);

        paparamslistNode1 = new AUnicoAParamsList(paparametroNode2);
        }
	nodeList.add(paparamslistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AVariosParamsList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAParamsList paparamslistNode1;
        {
            // Block
        PAParametro paparametroNode2;
        TComma tcommaNode3;
        PAParamsList paparamslistNode4;
        paparametroNode2 = (PAParametro)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        paparamslistNode4 = (PAParamsList)nodeArrayList3.get(0);

        paparamslistNode1 = new AVariosAParamsList(paparametroNode2, tcommaNode3, paparamslistNode4);
        }
	nodeList.add(paparamslistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AExprArgumento */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAArgumento paargumentoNode1;
        {
            // Block
        PAExpr paexprNode2;
        paexprNode2 = (PAExpr)nodeArrayList1.get(0);

        paargumentoNode1 = new AExprAArgumento(paexprNode2);
        }
	nodeList.add(paargumentoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AChamadaArgumento */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAArgumento paargumentoNode1;
        {
            // Block
        PAChamadaFunc pachamadafuncNode2;
        pachamadafuncNode2 = (PAChamadaFunc)nodeArrayList1.get(0);

        paargumentoNode1 = new AChamadaAArgumento(pachamadafuncNode2);
        }
	nodeList.add(paargumentoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ACondicionalArgumento */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAArgumento paargumentoNode1;
        {
            // Block
        PACondicional pacondicionalNode2;
        pacondicionalNode2 = (PACondicional)nodeArrayList1.get(0);

        paargumentoNode1 = new ACondicionalAArgumento(pacondicionalNode2);
        }
	nodeList.add(paargumentoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AParamParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAParametro paparametroNode1;
        {
            // Block
        PAType patypeNode2;
        TId tidNode3;
        patypeNode2 = (PAType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        paparametroNode1 = new AComumAParametro(patypeNode2, tidNode3);
        }
	nodeList.add(paparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AFuncaltaParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAParametro paparametroNode1;
        {
            // Block
        PAFuncAlta pafuncaltaNode2;
        pafuncaltaNode2 = (PAFuncAlta)nodeArrayList1.get(0);

        paparametroNode1 = new AFuncaltaAParametro(pafuncaltaNode2);
        }
	nodeList.add(paparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AFatorExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        paexprNode1 = (PAExpr)nodeArrayList1.get(0);
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce APlusExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        {
            // Block
        PAExpr paexprNode2;
        PAExpr paexprNode3;
        paexprNode2 = (PAExpr)nodeArrayList1.get(0);
        paexprNode3 = (PAExpr)nodeArrayList3.get(0);

        paexprNode1 = new AAPlusAExpr(paexprNode2, paexprNode3);
        }
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AMinusExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        {
            // Block
        PAExpr paexprNode2;
        PAExpr paexprNode3;
        paexprNode2 = (PAExpr)nodeArrayList1.get(0);
        paexprNode3 = (PAExpr)nodeArrayList3.get(0);

        paexprNode1 = new AAMinusAExpr(paexprNode2, paexprNode3);
        }
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ATermoFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        paexprNode1 = (PAExpr)nodeArrayList1.get(0);
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AMultFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        {
            // Block
        PAExpr paexprNode2;
        PAExpr paexprNode3;
        paexprNode2 = (PAExpr)nodeArrayList1.get(0);
        paexprNode3 = (PAExpr)nodeArrayList3.get(0);

        paexprNode1 = new AAMultAExpr(paexprNode2, paexprNode3);
        }
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ADivFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        {
            // Block
        PAExpr paexprNode2;
        PAExpr paexprNode3;
        paexprNode2 = (PAExpr)nodeArrayList1.get(0);
        paexprNode3 = (PAExpr)nodeArrayList3.get(0);

        paexprNode1 = new AADivAExpr(paexprNode2, paexprNode3);
        }
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AModFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        {
            // Block
        PAExpr paexprNode2;
        PAExpr paexprNode3;
        paexprNode2 = (PAExpr)nodeArrayList1.get(0);
        paexprNode3 = (PAExpr)nodeArrayList3.get(0);

        paexprNode1 = new AAModAExpr(paexprNode2, paexprNode3);
        }
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AValorTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        {
            // Block
        PAValor pavalorNode2;
        pavalorNode2 = (PAValor)nodeArrayList1.get(0);

        paexprNode1 = new AAValorAExpr(pavalorNode2);
        }
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AParTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        paexprNode1 = (PAExpr)nodeArrayList2.get(0);
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AIntValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAValor pavalorNode1;
        {
            // Block
        TIntType tinttypeNode2;
        tinttypeNode2 = (TIntType)nodeArrayList1.get(0);

        pavalorNode1 = new AIntAValor(tinttypeNode2);
        }
	nodeList.add(pavalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ARealValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAValor pavalorNode1;
        {
            // Block
        TRealType trealtypeNode2;
        trealtypeNode2 = (TRealType)nodeArrayList1.get(0);

        pavalorNode1 = new ARealAValor(trealtypeNode2);
        }
	nodeList.add(pavalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ABoolValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAValor pavalorNode1;
        {
            // Block
        TBoolType tbooltypeNode2;
        tbooltypeNode2 = (TBoolType)nodeArrayList1.get(0);

        pavalorNode1 = new ABoolAValor(tbooltypeNode2);
        }
	nodeList.add(pavalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AVarValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAValor pavalorNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pavalorNode1 = new AVarAValor(tidNode2);
        }
	nodeList.add(pavalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAType patypeNode1;
        {
            // Block
        TIntId tintidNode2;
        tintidNode2 = (TIntId)nodeArrayList1.get(0);

        patypeNode1 = new AIntAType(tintidNode2);
        }
	nodeList.add(patypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ABoolType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAType patypeNode1;
        {
            // Block
        TBoolId tboolidNode2;
        tboolidNode2 = (TBoolId)nodeArrayList1.get(0);

        patypeNode1 = new ABoolAType(tboolidNode2);
        }
	nodeList.add(patypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ARealType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAType patypeNode1;
        {
            // Block
        TRealId trealidNode2;
        trealidNode2 = (TRealId)nodeArrayList1.get(0);

        patypeNode1 = new ARealAType(trealidNode2);
        }
	nodeList.add(patypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AUnicoTypeList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PATypeList patypelistNode1;
        {
            // Block
        PAType patypeNode2;
        patypeNode2 = (PAType)nodeArrayList1.get(0);

        patypelistNode1 = new AUnicoATypeList(patypeNode2);
        }
	nodeList.add(patypelistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AVariosTypeList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PATypeList patypelistNode1;
        {
            // Block
        PAType patypeNode2;
        TComma tcommaNode3;
        PATypeList patypelistNode4;
        patypeNode2 = (PAType)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        patypelistNode4 = (PATypeList)nodeArrayList3.get(0);

        patypelistNode1 = new AVariosATypeList(patypeNode2, tcommaNode3, patypelistNode4);
        }
	nodeList.add(patypelistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AIfCondicional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PACondicional pacondicionalNode1;
        {
            // Block
        TIfId tifidNode2;
        PACondicao pacondicaoNode3;
        TThenId tthenidNode4;
        PAExpr paexprNode5;
        tifidNode2 = (TIfId)nodeArrayList1.get(0);
        pacondicaoNode3 = (PACondicao)nodeArrayList2.get(0);
        tthenidNode4 = (TThenId)nodeArrayList3.get(0);
        paexprNode5 = (PAExpr)nodeArrayList4.get(0);

        pacondicionalNode1 = new AIfACondicional(tifidNode2, pacondicaoNode3, tthenidNode4, paexprNode5);
        }
	nodeList.add(pacondicionalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AIfelseCondicional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PACondicional pacondicionalNode1;
        {
            // Block
        PACondicional pacondicionalNode2;
        TElseId telseidNode3;
        PAExpr paexprNode4;
        pacondicionalNode2 = (PACondicional)nodeArrayList1.get(0);
        telseidNode3 = (TElseId)nodeArrayList2.get(0);
        paexprNode4 = (PAExpr)nodeArrayList3.get(0);

        pacondicionalNode1 = new AIfelseACondicional(pacondicionalNode2, telseidNode3, paexprNode4);
        }
	nodeList.add(pacondicionalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ABoolCondicao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PACondicao pacondicaoNode1;
        {
            // Block
        TBoolType tbooltypeNode2;
        tbooltypeNode2 = (TBoolType)nodeArrayList1.get(0);

        pacondicaoNode1 = new ABoolACondicao(tbooltypeNode2);
        }
	nodeList.add(pacondicaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AEqCondicao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PACondicao pacondicaoNode1;
        {
            // Block
        PAValor pavalorNode2;
        PAIgual paigualNode3;
        pavalorNode2 = (PAValor)nodeArrayList1.get(0);
        paigualNode3 = (PAIgual)nodeArrayList2.get(0);

        pacondicaoNode1 = new AEqACondicao(pavalorNode2, paigualNode3);
        }
	nodeList.add(pacondicaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AMqCondicao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PACondicao pacondicaoNode1;
        {
            // Block
        PAValor pavalorNode2;
        PAMaior pamaiorNode3;
        pavalorNode2 = (PAValor)nodeArrayList1.get(0);
        pamaiorNode3 = (PAMaior)nodeArrayList2.get(0);

        pacondicaoNode1 = new AMqACondicao(pavalorNode2, pamaiorNode3);
        }
	nodeList.add(pacondicaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AMnCondicao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PACondicao pacondicaoNode1;
        {
            // Block
        PAValor pavalorNode2;
        PAMenor pamenorNode3;
        pavalorNode2 = (PAValor)nodeArrayList1.get(0);
        pamenorNode3 = (PAMenor)nodeArrayList2.get(0);

        pacondicaoNode1 = new AMnACondicao(pavalorNode2, pamenorNode3);
        }
	nodeList.add(pacondicaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ACondCondicao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PACondicao pacondicaoNode1;
        {
            // Block
        TLParen tlparenNode2;
        PACondicao pacondicaoNode3;
        TRParen trparenNode4;
        tlparenNode2 = (TLParen)nodeArrayList1.get(0);
        pacondicaoNode3 = (PACondicao)nodeArrayList2.get(0);
        trparenNode4 = (TRParen)nodeArrayList3.get(0);

        pacondicaoNode1 = new ACondACondicao(tlparenNode2, pacondicaoNode3, trparenNode4);
        }
	nodeList.add(pacondicaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AEqIgual */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAIgual paigualNode1;
        {
            // Block
        TEquals tequalsNode2;
        PAValor pavalorNode3;
        tequalsNode2 = (TEquals)nodeArrayList1.get(0);
        pavalorNode3 = (PAValor)nodeArrayList2.get(0);

        paigualNode1 = new AAIgual(tequalsNode2, pavalorNode3);
        }
	nodeList.add(paigualNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AMqMaior */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAMaior pamaiorNode1;
        {
            // Block
        TGThan tgthanNode2;
        PAValor pavalorNode3;
        tgthanNode2 = (TGThan)nodeArrayList1.get(0);
        pavalorNode3 = (PAValor)nodeArrayList2.get(0);

        pamaiorNode1 = new AAMaior(tgthanNode2, pavalorNode3);
        }
	nodeList.add(pamaiorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AMnMenor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAMenor pamenorNode1;
        {
            // Block
        TLThan tlthanNode2;
        PAValor pavalorNode3;
        tlthanNode2 = (TLThan)nodeArrayList1.get(0);
        pavalorNode3 = (PAValor)nodeArrayList2.get(0);

        pamenorNode1 = new AAMenor(tlthanNode2, pavalorNode3);
        }
	nodeList.add(pamenorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AFuncAlta */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAFuncAlta pafuncaltaNode1;
        {
            // Block
        PAType patypeNode2;
        TId tidNode3;
        TLParen tlparenNode4;
        PATypeList patypelistNode5;
        TRParen trparenNode6;
        patypeNode2 = (PAType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparenNode4 = (TLParen)nodeArrayList3.get(0);
        patypelistNode5 = (PATypeList)nodeArrayList4.get(0);
        trparenNode6 = (TRParen)nodeArrayList5.get(0);

        pafuncaltaNode1 = new AAFuncAlta(patypeNode2, tidNode3, tlparenNode4, patypelistNode5, trparenNode6);
        }
	nodeList.add(pafuncaltaNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, {22, SHIFT, 2}, },
			{{-1, ERROR, 1}, {22, SHIFT, 2}, },
			{{-1, ERROR, 2}, {2, SHIFT, 8}, },
			{{-1, ERROR, 3}, {31, ACCEPT, -1}, },
			{{-1, REDUCE, 11}, {22, SHIFT, 2}, },
			{{-1, REDUCE, 2}, {22, SHIFT, 2}, },
			{{-1, ERROR, 6}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 8}, {6, SHIFT, 13}, {7, SHIFT, 14}, {8, SHIFT, 15}, },
			{{-1, ERROR, 9}, {23, SHIFT, 17}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 16}, {28, SHIFT, 18}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 18}, {22, SHIFT, 19}, },
			{{-1, ERROR, 19}, {6, SHIFT, 13}, {7, SHIFT, 14}, {8, SHIFT, 15}, {23, SHIFT, 20}, },
			{{-1, ERROR, 20}, {21, SHIFT, 25}, },
			{{-1, ERROR, 21}, {23, SHIFT, 27}, },
			{{-1, REDUCE, 15}, {26, SHIFT, 28}, },
			{{-1, ERROR, 23}, {28, SHIFT, 29}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 25}, {22, SHIFT, 30}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 27}, {21, SHIFT, 25}, },
			{{-1, ERROR, 28}, {6, SHIFT, 13}, {7, SHIFT, 14}, {8, SHIFT, 15}, },
			{{-1, REDUCE, 20}, {22, SHIFT, 33}, },
			{{-1, ERROR, 30}, {3, SHIFT, 34}, {22, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 37}, {29, SHIFT, 38}, {30, SHIFT, 39}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 33}, {6, SHIFT, 13}, {7, SHIFT, 14}, {8, SHIFT, 15}, },
			{{-1, ERROR, 34}, {22, SHIFT, 49}, {27, SHIFT, 50}, {28, SHIFT, 51}, {29, SHIFT, 38}, {30, SHIFT, 39}, },
			{{-1, ERROR, 35}, {22, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 51}, {29, SHIFT, 38}, {30, SHIFT, 39}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 34}, {22, SHIFT, 55}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 41}, {23, SHIFT, 56}, },
			{{-1, REDUCE, 17}, {10, SHIFT, 57}, {11, SHIFT, 58}, },
			{{-1, REDUCE, 22}, {12, SHIFT, 59}, {13, SHIFT, 60}, {14, SHIFT, 61}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 19}, {5, SHIFT, 62}, },
			{{-1, REDUCE, 38}, {26, SHIFT, 63}, },
			{{-1, ERROR, 48}, {23, SHIFT, 64}, },
			{{-1, ERROR, 49}, {22, SHIFT, 49}, {27, SHIFT, 50}, {28, SHIFT, 51}, {29, SHIFT, 38}, {30, SHIFT, 39}, },
			{{-1, REDUCE, 33}, {4, REDUCE, 42}, {23, REDUCE, 42}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 52}, {15, SHIFT, 66}, {16, SHIFT, 67}, {17, SHIFT, 68}, },
			{{-1, ERROR, 53}, {4, SHIFT, 72}, },
			{{-1, ERROR, 54}, {10, SHIFT, 57}, {11, SHIFT, 58}, {23, SHIFT, 73}, },
			{{-1, ERROR, 55}, {3, SHIFT, 34}, {22, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 37}, {29, SHIFT, 38}, {30, SHIFT, 39}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 57}, {22, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 51}, {29, SHIFT, 38}, {30, SHIFT, 39}, },
			{{-1, ERROR, 58}, {22, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 51}, {29, SHIFT, 38}, {30, SHIFT, 39}, },
			{{-1, ERROR, 59}, {22, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 51}, {29, SHIFT, 38}, {30, SHIFT, 39}, },
			{{-1, ERROR, 60}, {22, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 51}, {29, SHIFT, 38}, {30, SHIFT, 39}, },
			{{-1, ERROR, 61}, {22, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 51}, {29, SHIFT, 38}, {30, SHIFT, 39}, },
			{{-1, ERROR, 62}, {22, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 51}, {29, SHIFT, 38}, {30, SHIFT, 39}, },
			{{-1, ERROR, 63}, {6, SHIFT, 13}, {7, SHIFT, 14}, {8, SHIFT, 15}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 65}, {23, SHIFT, 83}, },
			{{-1, ERROR, 66}, {27, SHIFT, 36}, {28, SHIFT, 51}, {29, SHIFT, 38}, {30, SHIFT, 39}, },
			{{-1, ERROR, 67}, {27, SHIFT, 36}, {28, SHIFT, 51}, {29, SHIFT, 38}, {30, SHIFT, 39}, },
			{{-1, ERROR, 68}, {27, SHIFT, 36}, {28, SHIFT, 51}, {29, SHIFT, 38}, {30, SHIFT, 39}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 72}, {22, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 51}, {29, SHIFT, 38}, {30, SHIFT, 39}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 74}, {23, SHIFT, 88}, },
			{{-1, REDUCE, 13}, {26, SHIFT, 89}, },
			{{-1, REDUCE, 23}, {12, SHIFT, 59}, {13, SHIFT, 60}, {14, SHIFT, 61}, },
			{{-1, REDUCE, 24}, {12, SHIFT, 59}, {13, SHIFT, 60}, {14, SHIFT, 61}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 41}, {10, SHIFT, 57}, {11, SHIFT, 58}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 40}, {10, SHIFT, 57}, {11, SHIFT, 58}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 89}, {3, SHIFT, 34}, {22, SHIFT, 35}, {27, SHIFT, 36}, {28, SHIFT, 37}, {29, SHIFT, 38}, {30, SHIFT, 39}, },
			{{-1, REDUCE, 14}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, },
			{{-1, 4}, {1, 7}, },
			{{-1, 9}, },
			{{-1, 26}, {27, 31}, },
			{{-1, 40}, },
			{{-1, 5}, {6, 12}, },
			{{-1, -1}, },
			{{-1, 6}, {4, 10}, {5, 11}, },
			{{-1, 74}, {89, 90}, },
			{{-1, 21}, {28, 32}, },
			{{-1, 75}, {30, 41}, },
			{{-1, 22}, },
			{{-1, 42}, {35, 54}, {62, 81}, {72, 87}, },
			{{-1, 43}, {57, 76}, {58, 77}, },
			{{-1, 44}, {59, 78}, {60, 79}, {61, 80}, },
			{{-1, 45}, {34, 52}, {49, 52}, {66, 84}, {67, 85}, {68, 86}, },
			{{-1, 23}, {8, 16}, {33, 47}, {63, 47}, },
			{{-1, 48}, {63, 82}, },
			{{-1, 46}, },
			{{-1, 53}, {49, 65}, },
			{{-1, 69}, },
			{{-1, 70}, },
			{{-1, 71}, },
			{{-1, 24}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'entry', '('",
			"expecting: '('",
			"expecting: 'function'",
			"expecting: EOF",
			"expecting: 'entry', '(', EOF",
			"expecting: '(', EOF",
			"expecting: 'entry'",
			"expecting: 'int', 'bool', 'real'",
			"expecting: ')'",
			"expecting: 'entry', EOF",
			"expecting: ')', ',', id",
			"expecting: id",
			"expecting: 'int', 'bool', 'real', ')'",
			"expecting: ':'",
			"expecting: ')', ','",
			"expecting: '(', ')', ','",
			"expecting: 'if', '(', bool type, id, int type, real type",
			"expecting: '(', bool type, id, int type, real type",
			"expecting: 'then', 'else', '+', '-', '*', '/', '%', ')', ','",
			"expecting: '+', '-', '*', '/', '%', '(', ')', ','",
			"expecting: 'then', 'else', '+', '-', '*', '/', '%', '=', '>', '<', ')', ','",
			"expecting: '+', '-', ')', ','",
			"expecting: 'else', '+', '-', '*', '/', '%', ')', ','",
			"expecting: 'else', ')', ','",
			"expecting: 'then', '=', '>', '<', ')'",
			"expecting: '=', '>', '<'",
			"expecting: 'then'",
			"expecting: '+', '-', ')'",
			"expecting: bool type, id, int type, real type",
			"expecting: 'then', ')'",
			"expecting: 'else', '+', '-', ')', ','",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 6, 5, 7, 8, 9, 3, 3, 10, 10, 10, 11, 4, 1, 12, 13, 8, 14, 11, 14, 1, 8, 13, 7, 15, 16, 8, 8, 7, 17, 17, 18, 19, 20, 20, 14, 8, 21, 22, 22, 22, 23, 14, 8, 17, 24, 20, 25, 26, 27, 16, 8, 17, 17, 17, 17, 17, 17, 7, 14, 8, 28, 28, 28, 29, 29, 29, 17, 22, 8, 14, 22, 22, 22, 22, 22, 30, 8, 29, 29, 29, 29, 30, 14, 16, 8, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
