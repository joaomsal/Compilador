/* This file was generated by SableCC (http://www.sablecc.org/). */

package nonneuman.node;

import nonneuman.analysis.*;

@SuppressWarnings("nls")
public final class AMnACondicao extends PACondicao
{
    private PAValor _aValor_;
    private PAMenor _aMenor_;

    public AMnACondicao()
    {
        // Constructor
    }

    public AMnACondicao(
        @SuppressWarnings("hiding") PAValor _aValor_,
        @SuppressWarnings("hiding") PAMenor _aMenor_)
    {
        // Constructor
        setAValor(_aValor_);

        setAMenor(_aMenor_);

    }

    @Override
    public Object clone()
    {
        return new AMnACondicao(
            cloneNode(this._aValor_),
            cloneNode(this._aMenor_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMnACondicao(this);
    }

    public PAValor getAValor()
    {
        return this._aValor_;
    }

    public void setAValor(PAValor node)
    {
        if(this._aValor_ != null)
        {
            this._aValor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._aValor_ = node;
    }

    public PAMenor getAMenor()
    {
        return this._aMenor_;
    }

    public void setAMenor(PAMenor node)
    {
        if(this._aMenor_ != null)
        {
            this._aMenor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._aMenor_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._aValor_)
            + toString(this._aMenor_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._aValor_ == child)
        {
            this._aValor_ = null;
            return;
        }

        if(this._aMenor_ == child)
        {
            this._aMenor_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._aValor_ == oldChild)
        {
            setAValor((PAValor) newChild);
            return;
        }

        if(this._aMenor_ == oldChild)
        {
            setAMenor((PAMenor) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
