/* This file was generated by SableCC (http://www.sablecc.org/). */

package nonneuman.analysis;

import nonneuman.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAOp1AInicio(AOp1AInicio node);
    void caseAOp2AInicio(AOp2AInicio node);
    void caseAOp3AInicio(AOp3AInicio node);
    void caseAUnicoABlocoList(AUnicoABlocoList node);
    void caseAVariosABlocoList(AVariosABlocoList node);
    void caseAAMain(AAMain node);
    void caseAABloco(AABloco node);
    void caseAFuncaoAFuncao(AFuncaoAFuncao node);
    void caseAVaziaAFuncao(AVaziaAFuncao node);
    void caseAIntAType(AIntAType node);
    void caseABoolAType(ABoolAType node);
    void caseARealAType(ARealAType node);
    void caseAUnicoATypeList(AUnicoATypeList node);
    void caseAVariosATypeList(AVariosATypeList node);
    void caseAComumAParametro(AComumAParametro node);
    void caseAFuncaltaAParametro(AFuncaltaAParametro node);
    void caseAUnicoAParamsList(AUnicoAParamsList node);
    void caseAVariosAParamsList(AVariosAParamsList node);
    void caseAARetorno(AARetorno node);
    void caseAExprAArgumento(AExprAArgumento node);
    void caseAChamadaAArgumento(AChamadaAArgumento node);
    void caseACondicionalAArgumento(ACondicionalAArgumento node);
    void caseAUnicoAArgsList(AUnicoAArgsList node);
    void caseAVariosAArgsList(AVariosAArgsList node);
    void caseAAPlusAExpr(AAPlusAExpr node);
    void caseAAMinusAExpr(AAMinusAExpr node);
    void caseAAMultAExpr(AAMultAExpr node);
    void caseAADivAExpr(AADivAExpr node);
    void caseAAModAExpr(AAModAExpr node);
    void caseAAValorAExpr(AAValorAExpr node);
    void caseAAChamadaFunc(AAChamadaFunc node);
    void caseAIfACondicional(AIfACondicional node);
    void caseAIfelseACondicional(AIfelseACondicional node);
    void caseABoolACondicao(ABoolACondicao node);
    void caseAEqACondicao(AEqACondicao node);
    void caseAMqACondicao(AMqACondicao node);
    void caseAMnACondicao(AMnACondicao node);
    void caseACondACondicao(ACondACondicao node);
    void caseAIntAValor(AIntAValor node);
    void caseARealAValor(ARealAValor node);
    void caseABoolAValor(ABoolAValor node);
    void caseAVarAValor(AVarAValor node);
    void caseAAIgual(AAIgual node);
    void caseAAMaior(AAMaior node);
    void caseAAMenor(AAMenor node);
    void caseAAFuncAlta(AAFuncAlta node);

    void caseTEntryPoint(TEntryPoint node);
    void caseTConstId(TConstId node);
    void caseTFuncId(TFuncId node);
    void caseTIfId(TIfId node);
    void caseTThenId(TThenId node);
    void caseTElseId(TElseId node);
    void caseTIntId(TIntId node);
    void caseTBoolId(TBoolId node);
    void caseTRealId(TRealId node);
    void caseTLambdaId(TLambdaId node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTEquals(TEquals node);
    void caseTGThan(TGThan node);
    void caseTLThan(TLThan node);
    void caseTNot(TNot node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTColon(TColon node);
    void caseTLParen(TLParen node);
    void caseTRParen(TRParen node);
    void caseTLBrac(TLBrac node);
    void caseTRBrac(TRBrac node);
    void caseTComma(TComma node);
    void caseTBoolType(TBoolType node);
    void caseTId(TId node);
    void caseTIntType(TIntType node);
    void caseTRealType(TRealType node);
    void caseTBlank(TBlank node);
    void caseTCommentLine(TCommentLine node);
    void caseTCommentBlock(TCommentBlock node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
