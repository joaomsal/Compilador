/* This file was generated by SableCC (http://www.sablecc.org/). */

package nonneuman.analysis;

import java.util.*;
import nonneuman.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPAInicio().apply(this);
        outStart(node);
    }

    public void inAOp1AInicio(AOp1AInicio node)
    {
        defaultIn(node);
    }

    public void outAOp1AInicio(AOp1AInicio node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOp1AInicio(AOp1AInicio node)
    {
        inAOp1AInicio(node);
        if(node.getAMain() != null)
        {
            node.getAMain().apply(this);
        }
        if(node.getABlocoList() != null)
        {
            node.getABlocoList().apply(this);
        }
        outAOp1AInicio(node);
    }

    public void inAOp2AInicio(AOp2AInicio node)
    {
        defaultIn(node);
    }

    public void outAOp2AInicio(AOp2AInicio node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOp2AInicio(AOp2AInicio node)
    {
        inAOp2AInicio(node);
        if(node.getABlocoList() != null)
        {
            node.getABlocoList().apply(this);
        }
        if(node.getAMain() != null)
        {
            node.getAMain().apply(this);
        }
        outAOp2AInicio(node);
    }

    public void inAOp3AInicio(AOp3AInicio node)
    {
        defaultIn(node);
    }

    public void outAOp3AInicio(AOp3AInicio node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOp3AInicio(AOp3AInicio node)
    {
        inAOp3AInicio(node);
        if(node.getAMain() != null)
        {
            node.getAMain().apply(this);
        }
        outAOp3AInicio(node);
    }

    public void inAUnicoABlocoList(AUnicoABlocoList node)
    {
        defaultIn(node);
    }

    public void outAUnicoABlocoList(AUnicoABlocoList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnicoABlocoList(AUnicoABlocoList node)
    {
        inAUnicoABlocoList(node);
        if(node.getABloco() != null)
        {
            node.getABloco().apply(this);
        }
        outAUnicoABlocoList(node);
    }

    public void inAVariosABlocoList(AVariosABlocoList node)
    {
        defaultIn(node);
    }

    public void outAVariosABlocoList(AVariosABlocoList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariosABlocoList(AVariosABlocoList node)
    {
        inAVariosABlocoList(node);
        if(node.getBlocos() != null)
        {
            node.getBlocos().apply(this);
        }
        if(node.getABloco() != null)
        {
            node.getABloco().apply(this);
        }
        outAVariosABlocoList(node);
    }

    public void inAAMain(AAMain node)
    {
        defaultIn(node);
    }

    public void outAAMain(AAMain node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAMain(AAMain node)
    {
        inAAMain(node);
        if(node.getABloco() != null)
        {
            node.getABloco().apply(this);
        }
        if(node.getEntryPoint() != null)
        {
            node.getEntryPoint().apply(this);
        }
        outAAMain(node);
    }

    public void inAABloco(AABloco node)
    {
        defaultIn(node);
    }

    public void outAABloco(AABloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAABloco(AABloco node)
    {
        inAABloco(node);
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getAFuncao() != null)
        {
            node.getAFuncao().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        outAABloco(node);
    }

    public void inAFuncaoAFuncao(AFuncaoAFuncao node)
    {
        defaultIn(node);
    }

    public void outAFuncaoAFuncao(AFuncaoAFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaoAFuncao(AFuncaoAFuncao node)
    {
        inAFuncaoAFuncao(node);
        if(node.getARetorno() != null)
        {
            node.getARetorno().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getAParamsList() != null)
        {
            node.getAParamsList().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAType() != null)
        {
            node.getAType().apply(this);
        }
        if(node.getFuncId() != null)
        {
            node.getFuncId().apply(this);
        }
        outAFuncaoAFuncao(node);
    }

    public void inAVaziaAFuncao(AVaziaAFuncao node)
    {
        defaultIn(node);
    }

    public void outAVaziaAFuncao(AVaziaAFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVaziaAFuncao(AVaziaAFuncao node)
    {
        inAVaziaAFuncao(node);
        if(node.getARetorno() != null)
        {
            node.getARetorno().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAType() != null)
        {
            node.getAType().apply(this);
        }
        if(node.getFuncId() != null)
        {
            node.getFuncId().apply(this);
        }
        outAVaziaAFuncao(node);
    }

    public void inAIntAType(AIntAType node)
    {
        defaultIn(node);
    }

    public void outAIntAType(AIntAType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntAType(AIntAType node)
    {
        inAIntAType(node);
        if(node.getIntId() != null)
        {
            node.getIntId().apply(this);
        }
        outAIntAType(node);
    }

    public void inABoolAType(ABoolAType node)
    {
        defaultIn(node);
    }

    public void outABoolAType(ABoolAType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolAType(ABoolAType node)
    {
        inABoolAType(node);
        if(node.getBoolId() != null)
        {
            node.getBoolId().apply(this);
        }
        outABoolAType(node);
    }

    public void inARealAType(ARealAType node)
    {
        defaultIn(node);
    }

    public void outARealAType(ARealAType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealAType(ARealAType node)
    {
        inARealAType(node);
        if(node.getRealId() != null)
        {
            node.getRealId().apply(this);
        }
        outARealAType(node);
    }

    public void inAUnicoATypeList(AUnicoATypeList node)
    {
        defaultIn(node);
    }

    public void outAUnicoATypeList(AUnicoATypeList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnicoATypeList(AUnicoATypeList node)
    {
        inAUnicoATypeList(node);
        if(node.getAType() != null)
        {
            node.getAType().apply(this);
        }
        outAUnicoATypeList(node);
    }

    public void inAVariosATypeList(AVariosATypeList node)
    {
        defaultIn(node);
    }

    public void outAVariosATypeList(AVariosATypeList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariosATypeList(AVariosATypeList node)
    {
        inAVariosATypeList(node);
        if(node.getTypes() != null)
        {
            node.getTypes().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getAType() != null)
        {
            node.getAType().apply(this);
        }
        outAVariosATypeList(node);
    }

    public void inAComumAParametro(AComumAParametro node)
    {
        defaultIn(node);
    }

    public void outAComumAParametro(AComumAParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComumAParametro(AComumAParametro node)
    {
        inAComumAParametro(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAType() != null)
        {
            node.getAType().apply(this);
        }
        outAComumAParametro(node);
    }

    public void inAFuncaltaAParametro(AFuncaltaAParametro node)
    {
        defaultIn(node);
    }

    public void outAFuncaltaAParametro(AFuncaltaAParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaltaAParametro(AFuncaltaAParametro node)
    {
        inAFuncaltaAParametro(node);
        if(node.getAFuncAlta() != null)
        {
            node.getAFuncAlta().apply(this);
        }
        outAFuncaltaAParametro(node);
    }

    public void inAUnicoAParamsList(AUnicoAParamsList node)
    {
        defaultIn(node);
    }

    public void outAUnicoAParamsList(AUnicoAParamsList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnicoAParamsList(AUnicoAParamsList node)
    {
        inAUnicoAParamsList(node);
        if(node.getAParametro() != null)
        {
            node.getAParametro().apply(this);
        }
        outAUnicoAParamsList(node);
    }

    public void inAVariosAParamsList(AVariosAParamsList node)
    {
        defaultIn(node);
    }

    public void outAVariosAParamsList(AVariosAParamsList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariosAParamsList(AVariosAParamsList node)
    {
        inAVariosAParamsList(node);
        if(node.getParams() != null)
        {
            node.getParams().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getAParametro() != null)
        {
            node.getAParametro().apply(this);
        }
        outAVariosAParamsList(node);
    }

    public void inAARetorno(AARetorno node)
    {
        defaultIn(node);
    }

    public void outAARetorno(AARetorno node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAARetorno(AARetorno node)
    {
        inAARetorno(node);
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getAArgumento() != null)
        {
            node.getAArgumento().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outAARetorno(node);
    }

    public void inAExprAArgumento(AExprAArgumento node)
    {
        defaultIn(node);
    }

    public void outAExprAArgumento(AExprAArgumento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprAArgumento(AExprAArgumento node)
    {
        inAExprAArgumento(node);
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        outAExprAArgumento(node);
    }

    public void inAChamadaAArgumento(AChamadaAArgumento node)
    {
        defaultIn(node);
    }

    public void outAChamadaAArgumento(AChamadaAArgumento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaAArgumento(AChamadaAArgumento node)
    {
        inAChamadaAArgumento(node);
        if(node.getAChamadaFunc() != null)
        {
            node.getAChamadaFunc().apply(this);
        }
        outAChamadaAArgumento(node);
    }

    public void inACondicionalAArgumento(ACondicionalAArgumento node)
    {
        defaultIn(node);
    }

    public void outACondicionalAArgumento(ACondicionalAArgumento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondicionalAArgumento(ACondicionalAArgumento node)
    {
        inACondicionalAArgumento(node);
        if(node.getACondicional() != null)
        {
            node.getACondicional().apply(this);
        }
        outACondicionalAArgumento(node);
    }

    public void inAUnicoAArgsList(AUnicoAArgsList node)
    {
        defaultIn(node);
    }

    public void outAUnicoAArgsList(AUnicoAArgsList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnicoAArgsList(AUnicoAArgsList node)
    {
        inAUnicoAArgsList(node);
        if(node.getAArgumento() != null)
        {
            node.getAArgumento().apply(this);
        }
        outAUnicoAArgsList(node);
    }

    public void inAVariosAArgsList(AVariosAArgsList node)
    {
        defaultIn(node);
    }

    public void outAVariosAArgsList(AVariosAArgsList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariosAArgsList(AVariosAArgsList node)
    {
        inAVariosAArgsList(node);
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getAArgumento() != null)
        {
            node.getAArgumento().apply(this);
        }
        outAVariosAArgsList(node);
    }

    public void inAAPlusAExpr(AAPlusAExpr node)
    {
        defaultIn(node);
    }

    public void outAAPlusAExpr(AAPlusAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAPlusAExpr(AAPlusAExpr node)
    {
        inAAPlusAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAPlusAExpr(node);
    }

    public void inAAMinusAExpr(AAMinusAExpr node)
    {
        defaultIn(node);
    }

    public void outAAMinusAExpr(AAMinusAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAMinusAExpr(AAMinusAExpr node)
    {
        inAAMinusAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAMinusAExpr(node);
    }

    public void inAAMultAExpr(AAMultAExpr node)
    {
        defaultIn(node);
    }

    public void outAAMultAExpr(AAMultAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAMultAExpr(AAMultAExpr node)
    {
        inAAMultAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAMultAExpr(node);
    }

    public void inAADivAExpr(AADivAExpr node)
    {
        defaultIn(node);
    }

    public void outAADivAExpr(AADivAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAADivAExpr(AADivAExpr node)
    {
        inAADivAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAADivAExpr(node);
    }

    public void inAAModAExpr(AAModAExpr node)
    {
        defaultIn(node);
    }

    public void outAAModAExpr(AAModAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAModAExpr(AAModAExpr node)
    {
        inAAModAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAModAExpr(node);
    }

    public void inAAValorAExpr(AAValorAExpr node)
    {
        defaultIn(node);
    }

    public void outAAValorAExpr(AAValorAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAValorAExpr(AAValorAExpr node)
    {
        inAAValorAExpr(node);
        if(node.getAValor() != null)
        {
            node.getAValor().apply(this);
        }
        outAAValorAExpr(node);
    }

    public void inAAChamadaFunc(AAChamadaFunc node)
    {
        defaultIn(node);
    }

    public void outAAChamadaFunc(AAChamadaFunc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAChamadaFunc(AAChamadaFunc node)
    {
        inAAChamadaFunc(node);
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getAArgsList() != null)
        {
            node.getAArgsList().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAChamadaFunc(node);
    }

    public void inAIfACondicional(AIfACondicional node)
    {
        defaultIn(node);
    }

    public void outAIfACondicional(AIfACondicional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfACondicional(AIfACondicional node)
    {
        inAIfACondicional(node);
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        if(node.getThenId() != null)
        {
            node.getThenId().apply(this);
        }
        if(node.getACondicao() != null)
        {
            node.getACondicao().apply(this);
        }
        if(node.getIfId() != null)
        {
            node.getIfId().apply(this);
        }
        outAIfACondicional(node);
    }

    public void inAIfelseACondicional(AIfelseACondicional node)
    {
        defaultIn(node);
    }

    public void outAIfelseACondicional(AIfelseACondicional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfelseACondicional(AIfelseACondicional node)
    {
        inAIfelseACondicional(node);
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        if(node.getElseId() != null)
        {
            node.getElseId().apply(this);
        }
        if(node.getACondicional() != null)
        {
            node.getACondicional().apply(this);
        }
        outAIfelseACondicional(node);
    }

    public void inABoolACondicao(ABoolACondicao node)
    {
        defaultIn(node);
    }

    public void outABoolACondicao(ABoolACondicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolACondicao(ABoolACondicao node)
    {
        inABoolACondicao(node);
        if(node.getBoolType() != null)
        {
            node.getBoolType().apply(this);
        }
        outABoolACondicao(node);
    }

    public void inAEqACondicao(AEqACondicao node)
    {
        defaultIn(node);
    }

    public void outAEqACondicao(AEqACondicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqACondicao(AEqACondicao node)
    {
        inAEqACondicao(node);
        if(node.getAIgual() != null)
        {
            node.getAIgual().apply(this);
        }
        if(node.getAValor() != null)
        {
            node.getAValor().apply(this);
        }
        outAEqACondicao(node);
    }

    public void inAMqACondicao(AMqACondicao node)
    {
        defaultIn(node);
    }

    public void outAMqACondicao(AMqACondicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMqACondicao(AMqACondicao node)
    {
        inAMqACondicao(node);
        if(node.getAMaior() != null)
        {
            node.getAMaior().apply(this);
        }
        if(node.getAValor() != null)
        {
            node.getAValor().apply(this);
        }
        outAMqACondicao(node);
    }

    public void inAMnACondicao(AMnACondicao node)
    {
        defaultIn(node);
    }

    public void outAMnACondicao(AMnACondicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMnACondicao(AMnACondicao node)
    {
        inAMnACondicao(node);
        if(node.getAMenor() != null)
        {
            node.getAMenor().apply(this);
        }
        if(node.getAValor() != null)
        {
            node.getAValor().apply(this);
        }
        outAMnACondicao(node);
    }

    public void inACondACondicao(ACondACondicao node)
    {
        defaultIn(node);
    }

    public void outACondACondicao(ACondACondicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondACondicao(ACondACondicao node)
    {
        inACondACondicao(node);
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getACondicao() != null)
        {
            node.getACondicao().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        outACondACondicao(node);
    }

    public void inAIntAValor(AIntAValor node)
    {
        defaultIn(node);
    }

    public void outAIntAValor(AIntAValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntAValor(AIntAValor node)
    {
        inAIntAValor(node);
        if(node.getIntType() != null)
        {
            node.getIntType().apply(this);
        }
        outAIntAValor(node);
    }

    public void inARealAValor(ARealAValor node)
    {
        defaultIn(node);
    }

    public void outARealAValor(ARealAValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealAValor(ARealAValor node)
    {
        inARealAValor(node);
        if(node.getRealType() != null)
        {
            node.getRealType().apply(this);
        }
        outARealAValor(node);
    }

    public void inABoolAValor(ABoolAValor node)
    {
        defaultIn(node);
    }

    public void outABoolAValor(ABoolAValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolAValor(ABoolAValor node)
    {
        inABoolAValor(node);
        if(node.getBoolType() != null)
        {
            node.getBoolType().apply(this);
        }
        outABoolAValor(node);
    }

    public void inAVarAValor(AVarAValor node)
    {
        defaultIn(node);
    }

    public void outAVarAValor(AVarAValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarAValor(AVarAValor node)
    {
        inAVarAValor(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVarAValor(node);
    }

    public void inAAIgual(AAIgual node)
    {
        defaultIn(node);
    }

    public void outAAIgual(AAIgual node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAIgual(AAIgual node)
    {
        inAAIgual(node);
        if(node.getAValor() != null)
        {
            node.getAValor().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        outAAIgual(node);
    }

    public void inAAMaior(AAMaior node)
    {
        defaultIn(node);
    }

    public void outAAMaior(AAMaior node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAMaior(AAMaior node)
    {
        inAAMaior(node);
        if(node.getAValor() != null)
        {
            node.getAValor().apply(this);
        }
        if(node.getGThan() != null)
        {
            node.getGThan().apply(this);
        }
        outAAMaior(node);
    }

    public void inAAMenor(AAMenor node)
    {
        defaultIn(node);
    }

    public void outAAMenor(AAMenor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAMenor(AAMenor node)
    {
        inAAMenor(node);
        if(node.getAValor() != null)
        {
            node.getAValor().apply(this);
        }
        if(node.getLThan() != null)
        {
            node.getLThan().apply(this);
        }
        outAAMenor(node);
    }

    public void inAAFuncAlta(AAFuncAlta node)
    {
        defaultIn(node);
    }

    public void outAAFuncAlta(AAFuncAlta node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAFuncAlta(AAFuncAlta node)
    {
        inAAFuncAlta(node);
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getATypeList() != null)
        {
            node.getATypeList().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAType() != null)
        {
            node.getAType().apply(this);
        }
        outAAFuncAlta(node);
    }
}
